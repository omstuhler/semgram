}
if(nrow(possessions)>0){
possessions$possession = str_split(possessions$possession, " ")
possessions = with(possessions,
{data.frame(lapply(possessions[,1:3], rep, times=lengths(Possession)),Possession=unlist(Possession))}
)
} else {character(0)}
} else {character(0)}
possessions
characterizations
treatments
actions
################################################################################################
agent_treatments = if("H" %in% motif_classes){
agent_treatments = rbind(dobj_treat_actor_At_casted,
dobj_treat_conj_actor_At_casted,
dobj_nconj_treat_At_casted,
by_act_agent_At_casted,
obj_of_by_act_nconj_ac_At_casted
)
if(lowercase){
agent_treatments$Entity = tolower(agent_treatments$Entity)
agent_treatments$treatment = tolower(agent_treatments$treatment)
agent_treatments$Agent = tolower(agent_treatments$Agent)
}
if(nrow(agent_treatments)>0){
agent_treatments$Agent = str_split(agent_treatments$Agent, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "treatment", "Entity")], rep, times=lengths(Agent)),Agent=unlist(Agent))}
)
agent_treatments$treatment = str_split(agent_treatments$treatment, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "Agent", "Entity")], rep, times=lengths(treatment)),treatment=unlist(treatment))}
)
} else {character(0)}
} else {character(0)}
agent_treatments
agent_treatments = agent_treatments[,c("doc_id", "ann_id", "Entity", "Agent", "treatment")]
agent_treatments
################################################################################################
action_Patients = if("aP" %in% motif_classes){
action_Patients = rbind(nsubj_obj_conj_act_aP_casted,
nsubj_obj_conj_aP_casted,
nsubj_conj_obj_act_aP_casted,
nsubj_conj_subj_cons_obj_aP_casted,
by_act_obj_aP_casted,
by_act_obj_nc_aP_casted,
by_act_obj_cverb_1_aP_casted,
by_act_obj_cverb_2_aP_casted,
by_act_obj_cverb_cobj_1_aP_casted,
by_act_obj_cverb_cobj_2_aP_casted,
xcomp_act_obj_aP_casted,
xcomp_act_obj_vconj_aP_casted,
xcomp_act_obj_nconj_aP_casted,
xcomp_act_obj_nconj_vconj_aP_casted
if(lowercase){
action_Patients$Entity = tolower(action_Patients$Entity)
action_Patients$action = tolower(action_Patients$action)
action_Patients$Patient = tolower(action_Patients$Patient)
}
if(nrow(action_Patients)>0){
action_Patients$Patient = str_split(action_Patients$Patient, " ")
action_Patients = with(action_Patients,
{data.frame(lapply(action_Patients[,c("doc_id", "ann_id", "action", "Entity")], rep, times=lengths(Patient)), Patient = unlist(Patient))}
)
action_Patients$action = str_split(action_Patients$action, " ")
action_Patients = with(action_Patients,
{data.frame(lapply(action_Patients[,c("doc_id", "ann_id", "Patient", "Entity")], rep, times=lengths(action)), action = unlist(action))}
)
} else {character(0)}
} else {character(0)}
action_Patients = action_Patients[,c("doc_id", "ann_id", "Entity",  "action", "Patient")]
################################################################################################
#action_Patients = if("aP" %in% motif_classes){
#  action_Patients = rbind(nsubj_obj_conj_act_aP_casted,
#                           nsubj_obj_conj_aP_casted,
#                           nsubj_conj_obj_act_aP_casted,
#                           nsubj_conj_subj_cons_obj_aP_casted,
#                           by_act_obj_aP_casted,
#                           by_act_obj_nc_aP_casted,
#                           by_act_obj_cverb_1_aP_casted,
#                           by_act_obj_cverb_2_aP_casted,
#                           by_act_obj_cverb_cobj_1_aP_casted,
#                           by_act_obj_cverb_cobj_2_aP_casted,
#                           xcomp_act_obj_aP_casted,
#                           xcomp_act_obj_vconj_aP_casted,
#                           xcomp_act_obj_nconj_aP_casted,
#                           xcomp_act_obj_nconj_vconj_aP_casted)
#  if(lowercase){
#    action_Patients$act = tolower(action_Patients$act)
#    action_Patients$Patient = tolower(action_Patients$Patient)
#  }
#  action_Patients$Patient_split = str_split(action_Patients$Patient," ")
#  if(nrow(action_Patients)>0){as.vector(unlist(apply(action_Patients, 1, semgram:::custom_paste_aP, markup)))}else{character(0)}
#  } else {character(0)}
###### Combine to list object
#motif_list = list("actions" = actions,
#                  "treatments" = treatments,
#                  "characterizations" = characterizations, "possessions" = possessions,
#                  "agent_treatments" = agent_treatments,
#                  "action_Patients" = action_Patients)
#
#
################################################################################################
############################################Return##############################################
################################################################################################
#return(motif_list)
}
################################################################################################
action_Patients = if("aP" %in% motif_classes){
action_Patients = rbind(nsubj_obj_conj_act_aP_casted,
nsubj_obj_conj_aP_casted,
nsubj_conj_obj_act_aP_casted,
nsubj_conj_subj_cons_obj_aP_casted,
by_act_obj_aP_casted,
by_act_obj_nc_aP_casted,
by_act_obj_cverb_1_aP_casted,
by_act_obj_cverb_2_aP_casted,
by_act_obj_cverb_cobj_1_aP_casted,
by_act_obj_cverb_cobj_2_aP_casted,
xcomp_act_obj_aP_casted,
xcomp_act_obj_vconj_aP_casted,
xcomp_act_obj_nconj_aP_casted,
xcomp_act_obj_nconj_vconj_aP_casted)
if(lowercase){
action_Patients$Entity = tolower(action_Patients$Entity)
action_Patients$action = tolower(action_Patients$action)
action_Patients$Patient = tolower(action_Patients$Patient)
}
if(nrow(action_Patients)>0){
action_Patients$Patient = str_split(action_Patients$Patient, " ")
action_Patients = with(action_Patients,
{data.frame(lapply(action_Patients[,c("doc_id", "ann_id", "action", "Entity")], rep, times=lengths(Patient)), Patient = unlist(Patient))}
)
action_Patients$action = str_split(action_Patients$action, " ")
action_Patients = with(action_Patients,
{data.frame(lapply(action_Patients[,c("doc_id", "ann_id", "Patient", "Entity")], rep, times=lengths(action)), action = unlist(action))}
)
} else {character(0)}
} else {character(0)}
action_Patients = action_Patients[,c("doc_id", "ann_id", "Entity",  "action", "Patient")]
action_Patients
##### Combine to list object
motif_list = list("actions" = actions,
"treatments" = treatments,
"characterizations" = characterizations, "possessions" = possessions,
"agent_treatments" = agent_treatments,
"action_Patients" = action_Patients)
markup
###############################################################################################
possessions = if("H" %in% motif_classes){
possessions = rbind(posessive_o,
posessive_of,
have_nsubj_obj_conj_act,
have_nsubj_obj_conj,
have_nsubj_conj_obj_act,
have_nsubj_conj_subj_cons_obj,
have_xcomp_act_obj,
have_xcomp_act_obj_vconj,
have_xcomp_act_obj_nconj,
have_xcomp_act_obj_nconj_vconj
)
if(lowercase){
possessions$Entity = tolower(possessions$Entity)
possessions$characterization = tolower(possessions$characterization)
}
if(nrow(possessions)>0){
possessions$possession = str_split(possessions$possession, " ")
possessions = with(possessions,
{data.frame(lapply(possessions[,1:3], rep, times=lengths(Possession)),Possession=unlist(Possession))}
)
} else {character(0)}
} else {character(0)}
possessions
agent_treatments
actions = rbind(nsubj_act_conj,
nsubj_act_noun_conj_verb_conj,
by_act,
by_act_noun_conjunct,
by_act_2,
by_act_2_1,
by_act_2_noun_conj,
by_act_2_noun_conj_1,
xcomp_act_conj_verb,
xcomp_act_conj_noun)
actions
actions$action
paste0("a_", actions$action)
if(markup){agent_treatments$markup = paste0("At_", agent_treatments$Agent, agent_treatments$treatment)}
agent_treatments$markup
if(markup){agent_treatments$markup = paste0("At_", agent_treatments$Agent, "_", agent_treatments$treatment)}
agent_treatments$markup
if(markup){action_Patients$markup = paste0("aP_", action_Patients$action, "_", action_Patients$Patient)}
action_Patients
##### Combine to list object
motif_list = list("actions" = actions,
"treatments" = treatments,
"characterizations" = characterizations,
"possessions" = possessions,
"agent_treatments" = agent_treatments,
"action_Patients" = action_Patients)
motif_list$actions
motif_list$treatments
motif_list$characterizations
motif_list$possessions
motif_list$agent_treatments
motif_list$action_Patients
detach("package:semgram", unload=TRUE)
remove.packages("semgram")
devtools::install("~/Desktop/Development/semgram_with_triplet_function")
#devtools::install_github("omstuhler/semgram")
knitr::opts_chunk$set(echo = TRUE)
actions = data.frame("Motif class" = "a",
"Sentence" = c("Emil calls.",
"Emil can call.",
"Emil called and asked.",
"John and Emil called.",
"John was called by Emil",
"My friend Emil called John.",
"Emil wants to call.",
"Emil wants you to call.")
)
patients = data.frame("Motif class" = "P",
"Sentence" = c("Emil asks John.",
"Peter and Emil ask John.",
"My friend Emil asks John.",
"Emil came and asked John.",
"Emil wants to ask John.",
"Emil calls John, Jane, and Steve.",
"Emil asks John a question.",
"John is asked by Emil")
)
treatments = data.frame("Motif class" = "t",
"Sentence" = c("John calls Emil.",
"John gives Emil an apple.",
"John gives Peter an Emil.",
"John calls Peter and Emil.",
"John gave Peter an apple and Emil.",
"Emil was called.")
)
agents = data.frame("Motif class" = "A",
"Sentence" = c("John calls Emil."
,"John gives Peter an Emil."
,"Peter and John ask Emil."
,"Emil is asked by  John."
,"John came and asked  Emil."
,"John wants to ask Emil."
,"My friend John asked your brother Emil.")
)
characterizations  = data.frame("Motif class" = "be",
"Sentence" = c("Emil is kind.",
"Emil looks sad.",
"Emil is the winner.",
"Emil remained president.",
"Emil could be the president.",
"Emil is kind and honest.",
"Emil won but remained sad.",
"Emil is going to be sad.",
"Emil hopes to remain president.",
"John bought a cheap, new Emil.",
"The winner was Emil.",
"The winners were John and Emil.",
"My brother Emil won.")
)
possessions = data.frame("Motif class" = "H",
"Sentence" = c("Emil’s spouse, friends, and parents were shocked.",
"The breaks and wheels of the Emil were old.",
"Emil has friends and enemies.")
)
action_patient = data.frame("Motif class" = "aP",
"Sentence" = c("Emil asks John.",
"Emil made and ate a cake.")
)
agent_treatment = data.frame("Motif class" = "At",
"Sentence" = "John asks Emil.")
df = rbind(actions, patients,
treatments, agents,
characterizations, possessions,
action_patient, agent_treatment)
annotate_and_extract = function(text, motif_class){
# Parse the sentence
tokens = spacy_parse(text, dependency = T)
# Extract the respective motif
motifs = extract_motifs(tokens = spacy_parse(text, dependency = T),
entities = "Emil", motif_classes = motif_class,
aux_verb_markup = T, verbose = F, markup = T
get_aux_verbs = T)
motif_list[[motif_class]]
motif_class = "t"
motif_list[[motif_class]]
unlist(motif_class)
unlist(motif_list)
rbindlist(motif_list)
which(motifs)
lengths(motifs)
lengths(motif_list)
which.max(lengths(motif_list))
motif_list[[which.max(lengths(motif_list))]]
motif_list[[which.max(lengths(motif_list))]]
motif_list[[which.max(lengths(motif_list))]]$markup
annotate_and_extract = function(text, motif_class){
# Parse the sentence
tokens = spacy_parse(text, dependency = T)
# Extract the respective motif
motifs = extract_motifs(tokens = spacy_parse(text, dependency = T),
entities = "Emil", motif_classes = motif_class,
aux_verb_markup = T, verbose = F, markup = T,
get_aux_verbs = T)
unlist(motif_list[[which.max(lengths(motif_list))]]$markup)
}
df$Extract = mapply(function(X,Y) {annotate_and_extract(text = X, motif_class = Y)},
X = df$Sentence, Y = df$Motif.class)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(spacyr)
# Installing semgram
devtools::install_github("omstuhler/semgram")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(spacyr)
# Installing semgram
#devtools::install_github("omstuhler/semgram")
devtools::install("~/Desktop/Development/semgram_with_triplet_function")
library(semgram)
# Uncomment for installing spaCy (and miniconda) in a
# self-contained environment
# spacy_install()
# Uncomment for downloading the "en_core_web_sm" annotation pipeline
# spacy_download_langmodel("en_core_web_sm")
spacy_initialize(model = "en_core_web_sm", refresh_settings = T)
text = "Emil chased the thief."
tokens_df = spacy_parse(text, dependency=T, entity = F)
knitr::kable(tokens_df)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"))
################################################################################################
agent_treatments = if("At" %in% motif_classes){
agent_treatments = rbind(dobj_treat_actor_At_casted,
dobj_treat_conj_actor_At_casted,
dobj_nconj_treat_At_casted,
by_act_agent_At_casted,
obj_of_by_act_nconj_ac_At_casted
)
if(lowercase){
agent_treatments$Entity = tolower(agent_treatments$Entity)
agent_treatments$treatment = tolower(agent_treatments$treatment)
agent_treatments$Agent = tolower(agent_treatments$Agent)
}
if(nrow(agent_treatments)>0){
agent_treatments$Agent = str_split(agent_treatments$Agent, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "treatment", "Entity")], rep, times=lengths(Agent)),Agent=unlist(Agent))}
)
agent_treatments$treatment = str_split(agent_treatments$treatment, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "Agent", "Entity")], rep, times=lengths(treatment)),treatment=unlist(treatment))}
)
} else {character(0)}
} else {character(0)}
agent_treatments
dim(agent_treatments)
tokens = NA
entities = NA
motif_classes = c("A", "t", "a", "P", "be", "H", "At", "aP")
fast = F
parse_multi_token_entities = T
extract = "lemma"
markup = T
be_entity = T
get_aux_verbs = F
aux_verb_markup = T
pron_as_ap = F
use_appos = T
lowercase = F
verbose = F
entities = c("Emil","Christiano Ronaldo", "Donald")
text = "Emil was nice. Emil has a house. Emil's house is cool. John and Emil have a dog. Donald and Emil chased the thief. Peter chased Emil. Christiano Ronaldo scored the goal. Steve asked Fred. Emil chased the thief. Steven and Emil chased the thief. Emil then won? My friend Emil came."
tokens_df = spacy_parse(text, dependency=T, entity = F)
tokens = tokens_df
################################################################################################
agent_treatments = if("At" %in% motif_classes){
agent_treatments = rbind(dobj_treat_actor_At_casted,
dobj_treat_conj_actor_At_casted,
dobj_nconj_treat_At_casted,
by_act_agent_At_casted,
obj_of_by_act_nconj_ac_At_casted
)
if(lowercase){
agent_treatments$Entity = tolower(agent_treatments$Entity)
agent_treatments$treatment = tolower(agent_treatments$treatment)
agent_treatments$Agent = tolower(agent_treatments$Agent)
}
if(nrow(agent_treatments)>0){
agent_treatments$Agent = str_split(agent_treatments$Agent, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "treatment", "Entity")], rep, times=lengths(Agent)),Agent=unlist(Agent))}
)
agent_treatments$treatment = str_split(agent_treatments$treatment, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "Agent", "Entity")], rep, times=lengths(treatment)),treatment=unlist(treatment))}
)
} else {character(0)}
} else {character(0)}
################################################################################################
agent_treatments = if("At" %in% motif_classes){
agent_treatments = rbind(dobj_treat_actor_At_casted,
dobj_treat_conj_actor_At_casted,
dobj_nconj_treat_At_casted,
by_act_agent_At_casted,
obj_of_by_act_nconj_ac_At_casted
)
if(lowercase){
agent_treatments$Entity = tolower(agent_treatments$Entity)
agent_treatments$treatment = tolower(agent_treatments$treatment)
agent_treatments$Agent = tolower(agent_treatments$Agent)
}
if(nrow(agent_treatments)>0){
agent_treatments$Agent = str_split(agent_treatments$Agent, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "treatment", "Entity")], rep, times=lengths(Agent)),Agent=unlist(Agent))}
)
agent_treatments$treatment = str_split(agent_treatments$treatment, " ")
agent_treatments = with(agent_treatments,
{data.frame(lapply(agent_treatments[,c("doc_id", "ann_id", "Agent", "Entity")], rep, times=lengths(treatment)),treatment=unlist(treatment))}
)
} else {character(0)}
} else {character(0)}
agent_treatments = agent_treatments[,c("doc_id", "ann_id", "Entity", "Agent", "treatment")]
agent_treatments
detach("package:semgram", unload=TRUE)
remove.packages("semgram")
devtools::install("~/Desktop/Development/semgram_with_triplet_function")
#devtools::install_github("omstuhler/semgram")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(spacyr)
# Installing semgram
#devtools::install_github("omstuhler/semgram")
devtools::install("~/Desktop/Development/semgram_with_triplet_function")
library(semgram)
# Uncomment for installing spaCy (and miniconda) in a
# self-contained environment
# spacy_install()
# Uncomment for downloading the "en_core_web_sm" annotation pipeline
# spacy_download_langmodel("en_core_web_sm")
spacy_initialize(model = "en_core_web_sm", refresh_settings = T)
text = "Emil chased the thief."
tokens_df = spacy_parse(text, dependency=T, entity = F)
knitr::kable(tokens_df)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"))
characterizations = character()
characterizations = character(0)
nrow(characterizations)
characterizations == character(0)
characterizations != character(0)
characterizations
length(characterizations)
actions
length(actions)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(spacyr)
# Installing semgram
#devtools::install_github("omstuhler/semgram")
devtools::install("~/Desktop/Development/semgram_with_triplet_function")
library(semgram)
# Uncomment for installing spaCy (and miniconda) in a
# self-contained environment
# spacy_install()
# Uncomment for downloading the "en_core_web_sm" annotation pipeline
# spacy_download_langmodel("en_core_web_sm")
spacy_initialize(model = "en_core_web_sm", refresh_settings = T)
text = "Emil chased the thief."
tokens_df = spacy_parse(text, dependency=T, entity = F)
knitr::kable(tokens_df)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"))
str(motifs)
motifs$actions
motifs$action_Patients
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"), markup = T)
cat(motifs$action_Patients$markup)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"), markup = T)
cat(motifs$actions$markup)
cat(motifs$action_Patients$markup)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"), markup = T)
kable(motifs$actions)
motifs = extract_motifs(tokens = tokens_df, entities = c("Emil"), markup = T)
knitr::kable(motifs$actions)
knitr::kable(motifs$action_Patients)
unlist(motifs$actions)
motifs$actions
text = "The plan was announced early this week by Biden. The president's speech received criticism."
tokens = spacy_parse(text, dependency = T)
motifs = extract_motifs(tokens = spacy_parse(text, dependency=T), entities = c("Biden", "president"),
parse_multi_token_entities = T,
get_aux_verbs = T,
extract = "token",
markup = F)
motifs$action_Patients
motifs
unlist(motifs)
library(spacyr)
spacy_initialize(model = "en_core_web_lg", refresh_settings = T)
library(semgram)
library(spacyr)
library(gutenbergr)
spacy_initialize(model = "en_core_web_sm", refresh_settings = T)
text = "Emil chased the thief."
tokens_df = spacy_parse(text, dependency=T, entity = F)
tokens_df
extract_motifs(tokens = tokens_df, entities = c("Emil"))
setwd("~/Desktop/Development/semgram")
roxygen2::roxygenise()
